name: Build & Test

on: [push, pull_request]

jobs:
  pre-commit:
    name: Run pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python 3.8
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Get node version
        id: node-version
        run: echo "::set-output name=node-version::$(node --version)"
      - uses: Gr1N/setup-poetry@v4
      - name: Configure poetry
        run: poetry config virtualenvs.in-project true
      - name: Cache poetry venv
        id: cache-poetry
        uses: actions/cache@v2
        with:
          path: web/.venv
          key: "poetry-${{ runner.os }}-\
            ${{ steps.setup-python.outputs.python-version }}-\
            ${{ hashFiles('web/poetry.lock') }}"
          restore-keys: |
            poetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
      - name: Install poetry dependencies
        run: |
          cd web/
          poetry install
      - name: Cache pre-commit cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pre-commit
          key: "pre-commit-${{ runner.os }}-\
            ${{ steps.setup-python.outputs.python-version }}-\
            ${{ steps.node-version.outputs.node-version }}-\
            ${{ hashFiles('.pre-commit-config.yaml') }}"
      - name: Run pre-commit
        run: |
          cd web/
          poetry run pre-commit run --show-diff-on-failure --color=always --all-files
  build:
    name: Build and test
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker image
        run: docker build -t thunderstore:${GITHUB_SHA} .
      - name: Run pytest
        run: >
          docker run --rm
          --entrypoint pytest
          -e SECRET_KEY=hunter2
          -v "$(pwd)/coverage_results:/app/coverage_results"
          --no-healthcheck
          thunderstore:${GITHUB_SHA}
          --cov-report=xml:coverage_results/coverage.xml
          --cov-report=term
          --cov /app/
      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage_results/coverage.xml
      - name: Run mypy
        run: >
          docker run --rm
          --entrypoint mypy
          -e SECRET_KEY=hunter2
          --no-healthcheck
          thunderstore:${GITHUB_SHA}
          /app/
          || :
      - name: Check for missing migrations
        run: >
          docker run --rm
          --entrypoint python
          -e SECRET_KEY=hunter2
          -e DATABASE_URL=sqlite://django.db
          --no-healthcheck
          thunderstore:${GITHUB_SHA}
          manage.py makemigrations --check
      - name: Tag image
        run: |
          docker tag thunderstore:${GITHUB_SHA} riskofthunder/thunderstore:${GITHUB_SHA}
          docker tag thunderstore:${GITHUB_SHA} ghcr.io/risk-of-thunder/thunderstore:${GITHUB_SHA}
      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: Push image to Docker Hub
        run: |
          echo "Pushing riskofthunder/thunderstore:${GITHUB_SHA}"
          docker push riskofthunder/thunderstore
      - name: Login to GitHub Container Registry
        env:
          DOCKER_USERNAME: ${{ secrets.GHCR_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.GHCR_PAT }}
        run: docker login ghcr.io -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: Push image to GitHub Container Registry
        run: |
          echo "Pushing ghcr.io/risk-of-thunder/thunderstore:${GITHUB_SHA}"
          docker push ghcr.io/risk-of-thunder/thunderstore
